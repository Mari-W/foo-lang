enum AlgebraicDataType {
    Base,
    Tup(Int, Int),
    Struct(Struct),
    Recurse(Int)
}

struct Struct {
    field: Int
}

fn main() {
    {let x = 5};
    {x = ""};
    match env_arg(2) {
        "42" => print("good boy"),
        x => print(x),
    }
}

fn print(message: Str) {~
    use std::env;
    println!("{}", message);
~}

fn read(message: Str) -> Str {~
    use std::io;
    use std::io::Write;

    print!("{}", message);
    io::stdout().flush().unwrap();

    let mut buffer = String::new();
    io::stdin().read_line(&mut buffer).unwrap();
    buffer   
~}

fn env_arg(i: Int) -> Str {~
    use std::convert::TryFrom;
    std::env::args().collect::<Vec<String>>()[usize::try_from(i).unwrap()].clone()
~}